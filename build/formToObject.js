!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.formToObject=t():e.formToObject=t()}(this,(()=>(()=>{"use strict";var e={746:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FormToObject=void 0;const o=n(143),i=n(593);class r{constructor(e,t){if(this.formSelector="",this.$form=null,this.$formElements=[],this.settings={includeEmptyValuedElements:!1,w3cSuccessfulControlsOnly:!1,debug:!0},!e)throw new Error("No selector was passed.");if(this.formSelector=e,void 0!==t&&(0,i.getObjLength)(t)>0&&(0,i.extend)(this.settings,t),!this.initForm())throw new Error("The <form> DOM element could not be found.");if(!this.initFormElements())throw new Error("No <form> DOM elements were found. Form is empty.")}initForm(){return"string"==typeof this.formSelector?(this.$form=document.getElementById(this.formSelector),(0,o.isDomElementNode)(this.$form)):!!(0,o.isDomElementNode)(this.formSelector)&&(this.$form=this.formSelector,!0)}initFormElements(){var e;return this.$formElements=[...null===(e=this.$form)||void 0===e?void 0:e.querySelectorAll("input, textarea, select")],this.$formElements.length>0}convertToObj(){let e,t,n,s=0;const l=Object.create(null);for(s=0;s<this.$formElements.length;s++)t=this.$formElements[s],!t.name||""===t.name||t.disabled||(0,o.isRadio)(t)&&!(0,o.isChecked)(t)||(n=this.getNodeValues(t),(!1!==n||this.settings.includeEmptyValuedElements)&&(e=t.name.match(r.keyRegex),e&&1===e.length&&this.processSingleLevelNode(t,e,n||"",l),e&&e.length>1&&this.processMultiLevelNode(t,e,n||"",l)));return(0,i.getObjLength)(l)>0&&l}getNodeValues(e){var t;if((0,o.isRadio)(e))return!!(0,o.isChecked)(e)&&e.value;if((0,o.isCheckbox)(e))return!!(0,o.isChecked)(e)&&e.value;if((0,o.isFileField)(e))return!!(0,o.isUploadForm)(this.$form)&&((0,o.isFileList)(e)&&(null===(t=null==e?void 0:e.files)||void 0===t?void 0:t.length)?e.files:!(!e.value||""===e.value)&&e.value);if((0,o.isTextarea)(e))return!(!e.value||""===e.value)&&e.value;if((0,o.isSelectSimple)(e))return e.value&&""!==e.value?e.value:!(!e.options||!e.options.length||""===e.options[0].value)&&e.options[0].value;if((0,o.isSelectMultiple)(e)){if(e.options&&e.options.length>0){const t=[];return(0,i.forEach)(e.options,(function(e){e.selected&&t.push(e.value)})),(this.settings.includeEmptyValuedElements||!!t.length)&&t}return!1}return(0,o.isSubmitButton)(e)?e.value&&""!==e.value?e.value:!(!e.innerText||""===e.innerText)&&e.innerText:void 0!==e.value&&(this.settings.includeEmptyValuedElements||""!==e.value)&&e.value}processSingleLevelNode(e,t,n,i){const r=t[0];if((0,o.isRadio)(e))return!1!==n?(i[r]=n,n):void 0;if((0,o.isCheckbox)(e)){if(!1===n)return;if(this.formElementHasSiblings(e))return i[r]||(i[r]=[]),i[r].push(n);i[r]=n}if((0,o.isSelectMultiple)(e)){if(!1===n)return;i[r]=n}return i[r]=n,n}processMultiLevelNode(e,t,n,o){const r=t[0];return t.length>1?"[]"===r?(o[(0,i.getNextIntegerKey)(o)]=Object.create(null),this.processMultiLevelNode(e,t.splice(1,t.length),n,o[(0,i.getLastIntegerKey)(o)])):(o[r]&&(0,i.getObjLength)(o[r])>0||(o[r]=Object.create(null)),this.processMultiLevelNode(e,t.splice(1,t.length),n,o[r])):1===t.length?"[]"===r?(o[(0,i.getNextIntegerKey)(o)]=n,o):(this.processSingleLevelNode(e,t,n,o),o):void 0}formElementHasSiblings(e){const t=e.name;return Array.prototype.filter.call(this.$formElements,(e=>e.name===t)).length>1}}t.FormToObject=r,r.keyRegex=/[^[\]]+|\[]/g},143:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isFileList=t.isChecked=t.isSubmitButton=t.isSelectMultiple=t.isSelectSimple=t.isTextarea=t.isFileField=t.isCheckbox=t.isRadio=t.isUploadForm=t.isDomElementNode=void 0,t.isDomElementNode=function(e){return Boolean(e)&&"object"==typeof e&&"nodeType"in e&&1===e.nodeType},t.isUploadForm=function(e){return Boolean(e.enctype&&"multipart/form-data"===e.enctype)},t.isRadio=function(e){return"INPUT"===e.nodeName&&"radio"===e.type},t.isCheckbox=function(e){return"INPUT"===e.nodeName&&"checkbox"===e.type},t.isFileField=function(e){return"INPUT"===e.nodeName&&"file"===e.type},t.isTextarea=function(e){return"TEXTAREA"===e.nodeName},t.isSelectSimple=function(e){return"SELECT"===e.nodeName&&"select-one"===e.type},t.isSelectMultiple=function(e){return"SELECT"===e.nodeName&&"select-multiple"===e.type},t.isSubmitButton=function(e){return"BUTTON"===e.nodeName&&"submit"===e.type},t.isChecked=function(e){return e.checked},t.isFileList=function(e){return window.FileList&&e.files instanceof window.FileList}},593:(e,t)=>{function n(e){if(e&&"object"==typeof e)return Object.keys(e).filter((function(e){return!isNaN(parseInt(e,10))})).splice(-1)[0]}Object.defineProperty(t,"__esModule",{value:!0}),t.forEach=t.extend=t.getObjLength=t.getNextIntegerKey=t.getLastIntegerKey=t.checkForLastNumericKey=void 0,t.checkForLastNumericKey=n,t.getLastIntegerKey=function(e){const t=n(e);return"string"==typeof t?parseInt(t,10):0},t.getNextIntegerKey=function(e){const t=n(e);return"string"==typeof t?parseInt(t,10)+1:0},t.getObjLength=function(e){if("object"!=typeof e||null===e)return 0;let t,n=0;if("function"==typeof Object.keys)n=Object.keys(e).length;else for(t in e)Object.prototype.hasOwnProperty.call(e,t)&&n++;return n},t.extend=function(e,t){let n;for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},t.forEach=function(e,t){return Array.prototype.forEach.call(e,t)}}},t={};function n(o){var i=t[o];if(void 0!==i)return i.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,n),r.exports}var o={};return(()=>{var e=o;const t=n(746);e.default=function(e,n){try{return new t.FormToObject(e,n).convertToObj()}catch(e){return console.log("formToObject ERROR:",e.message),!1}}})(),o.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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b3VyY2VzIjpbIndlYnBhY2s6Ly9mb3JtVG9PYmplY3Qvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL2Zvcm1Ub09iamVjdC8uL3NyYy9Gb3JtVG9PYmplY3QudHMiLCJ3ZWJwYWNrOi8vZm9ybVRvT2JqZWN0Ly4vc3JjL2RvbS50cyIsIndlYnBhY2s6Ly9mb3JtVG9PYmplY3QvLi9zcmMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vZm9ybVRvT2JqZWN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Zvcm1Ub09iamVjdC8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJmb3JtVG9PYmplY3RcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiZm9ybVRvT2JqZWN0XCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgKCkgPT4ge1xucmV0dXJuICIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Gb3JtVG9PYmplY3QgPSB2b2lkIDA7XG5jb25zdCBkb21fMSA9IHJlcXVpcmUoXCIuL2RvbVwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNsYXNzIEZvcm1Ub09iamVjdCB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5mb3JtU2VsZWN0b3IgPSAnJztcbiAgICAgICAgdGhpcy4kZm9ybSA9IG51bGw7XG4gICAgICAgIHRoaXMuJGZvcm1FbGVtZW50cyA9IFtdO1xuICAgICAgICAvLyBFeHBlcmltZW50YWwuIERvbid0IHJlbHkgb24gdGhlbSB5ZXQuXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBpbmNsdWRlRW1wdHlWYWx1ZWRFbGVtZW50czogZmFsc2UsXG4gICAgICAgICAgICB3M2NTdWNjZXNzZnVsQ29udHJvbHNPbmx5OiBmYWxzZSxcbiAgICAgICAgICAgIGRlYnVnOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIC8vIEFzc2lnbiB0aGUgY3VycmVudCBmb3JtIHJlZmVyZW5jZS5cbiAgICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBzZWxlY3RvciB3YXMgcGFzc2VkLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBmb3JtIHJlZmVyZW5jZSBpcyBhbHdheXMgdGhlIGZpcnN0IHBhcmFtZXRlciBvZiB0aGUgbWV0aG9kLlxuICAgICAgICAvLyBFZzogZm9ybVRvT2JqZWN0KCdteUZvcm0nKVxuICAgICAgICB0aGlzLmZvcm1TZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICAvLyBPdmVycmlkZSBjdXJyZW50IHNldHRpbmdzLlxuICAgICAgICAvLyBFZy4gZm9ybVRvT2JqZWN0KCdteUZvcm0nLCB7bXlTZXR0aW5nOiB0cnVlfSlcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAndW5kZWZpbmVkJyAmJiAoMCwgdXRpbHNfMS5nZXRPYmpMZW5ndGgpKG9wdGlvbnMpID4gMCkge1xuICAgICAgICAgICAgKDAsIHV0aWxzXzEuZXh0ZW5kKSh0aGlzLnNldHRpbmdzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaW5pdEZvcm0oKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgPGZvcm0+IERPTSBlbGVtZW50IGNvdWxkIG5vdCBiZSBmb3VuZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaW5pdEZvcm1FbGVtZW50cygpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIDxmb3JtPiBET00gZWxlbWVudHMgd2VyZSBmb3VuZC4gRm9ybSBpcyBlbXB0eS4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbiBIVE1MIDxmb3JtPiBjYW4gYmUgaW5pdGlhbGl6ZWQgd2l0aCBhIHN0cmluZyBET00gc2VsZWN0b3IgZS5nLiAnLm15Rm9ybSdcbiAgICAgKiBvciBhIERPTSBvYmplY3QgcmVmZXJlbmNlLlxuICAgICAqL1xuICAgIGluaXRGb3JtKCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZm9ybVNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy4kZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZm9ybVNlbGVjdG9yKTtcbiAgICAgICAgICAgIHJldHVybiAoMCwgZG9tXzEuaXNEb21FbGVtZW50Tm9kZSkodGhpcy4kZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKDAsIGRvbV8xLmlzRG9tRWxlbWVudE5vZGUpKHRoaXMuZm9ybVNlbGVjdG9yKSkgeyAvLyBAdG9kbzogU2hvdWxkIEkgY2hlY2sgZm9yIERPTS5ub2RlVHlwZT9cbiAgICAgICAgICAgIHRoaXMuJGZvcm0gPSB0aGlzLmZvcm1TZWxlY3RvcjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gU2V0IHRoZSBlbGVtZW50cyB3ZSBuZWVkIHRvIHBhcnNlLlxuICAgIGluaXRGb3JtRWxlbWVudHMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy4kZm9ybUVsZW1lbnRzID0gWy4uLihfYSA9IHRoaXMuJGZvcm0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGZvcm1FbGVtZW50cy5sZW5ndGggPiAwO1xuICAgIH1cbiAgICBjb252ZXJ0VG9PYmooKSB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IG9iaktleU5hbWVzO1xuICAgICAgICBsZXQgJGRvbU5vZGU7XG4gICAgICAgIGxldCBkb21Ob2RlVmFsdWU7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLiRmb3JtRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICRkb21Ob2RlID0gdGhpcy4kZm9ybUVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgLy8gU2tpcCB0aGUgZWxlbWVudCBpZiB0aGUgJ25hbWUnIGF0dHJpYnV0ZSBpcyBlbXB0eS5cbiAgICAgICAgICAgIC8vIFNraXAgdGhlICdkaXNhYmxlZCcgZWxlbWVudHMuXG4gICAgICAgICAgICAvLyBTa2lwIHRoZSBub24tc2VsZWN0ZWQgcmFkaW8gZWxlbWVudHMuXG4gICAgICAgICAgICBpZiAoISRkb21Ob2RlLm5hbWUgfHxcbiAgICAgICAgICAgICAgICAkZG9tTm9kZS5uYW1lID09PSAnJyB8fFxuICAgICAgICAgICAgICAgICRkb21Ob2RlLmRpc2FibGVkIHx8XG4gICAgICAgICAgICAgICAgKCgwLCBkb21fMS5pc1JhZGlvKSgkZG9tTm9kZSkgJiYgISgwLCBkb21fMS5pc0NoZWNrZWQpKCRkb21Ob2RlKSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEdldCB0aGUgZmluYWwgcHJvY2Vzc2VkIGRvbU5vZGUgdmFsdWUuXG4gICAgICAgICAgICBkb21Ob2RlVmFsdWUgPSB0aGlzLmdldE5vZGVWYWx1ZXMoJGRvbU5vZGUpO1xuICAgICAgICAgICAgLy8gRXhjbHVkZSBlbXB0eSB2YWx1ZWQgbm9kZXMgaWYgdGhlIHNldHRpbmdzIGFsbG93IGl0LlxuICAgICAgICAgICAgaWYgKGRvbU5vZGVWYWx1ZSA9PT0gZmFsc2UgJiYgIXRoaXMuc2V0dGluZ3MuaW5jbHVkZUVtcHR5VmFsdWVkRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEV4dHJhY3QgYWxsIHBvc3NpYmxlIGtleXNcbiAgICAgICAgICAgIC8vIEUuZy4gbmFtZT1cImZpcnN0TmFtZVwiLCBuYW1lPVwic2V0dGluZ3NbYV1bYl1cIiwgbmFtZT1cInNldHRpbmdzWzBdW2FdXCJcbiAgICAgICAgICAgIG9iaktleU5hbWVzID0gJGRvbU5vZGUubmFtZS5tYXRjaChGb3JtVG9PYmplY3Qua2V5UmVnZXgpO1xuICAgICAgICAgICAgaWYgKG9iaktleU5hbWVzICYmIG9iaktleU5hbWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc1NpbmdsZUxldmVsTm9kZSgkZG9tTm9kZSwgb2JqS2V5TmFtZXMsIChkb21Ob2RlVmFsdWUgPyBkb21Ob2RlVmFsdWUgOiAnJyksIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2JqS2V5TmFtZXMgJiYgb2JqS2V5TmFtZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc011bHRpTGV2ZWxOb2RlKCRkb21Ob2RlLCBvYmpLZXlOYW1lcywgKGRvbU5vZGVWYWx1ZSA/IGRvbU5vZGVWYWx1ZSA6ICcnKSwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayB0aGUgbGVuZ3RoIG9mIHRoZSByZXN1bHQuXG4gICAgICAgIGNvbnN0IHJlc3VsdExlbmd0aCA9ICgwLCB1dGlsc18xLmdldE9iakxlbmd0aCkocmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdExlbmd0aCA+IDAgPyByZXN1bHQgOiBmYWxzZTtcbiAgICB9XG4gICAgZ2V0Tm9kZVZhbHVlcygkZG9tTm9kZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIFdlJ3JlIG9ubHkgaW50ZXJlc3RlZCBpbiB0aGUgcmFkaW8gdGhhdCBpcyBjaGVja2VkLlxuICAgICAgICBpZiAoKDAsIGRvbV8xLmlzUmFkaW8pKCRkb21Ob2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBkb21fMS5pc0NoZWNrZWQpKCRkb21Ob2RlKSA/ICRkb21Ob2RlLnZhbHVlIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UncmUgb25seSBpbnRlcmVzdGVkIGluIHRoZSBjaGVja2JveCB0aGF0IGlzIGNoZWNrZWQuXG4gICAgICAgIGlmICgoMCwgZG9tXzEuaXNDaGVja2JveCkoJGRvbU5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGRvbV8xLmlzQ2hlY2tlZCkoJGRvbU5vZGUpID8gJGRvbU5vZGUudmFsdWUgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGaWxlIGlucHV0cyBhcmUgYSBzcGVjaWFsIGNhc2UuXG4gICAgICAgIC8vIFdlIGhhdmUgdG8gZ3JhYiB0aGUgLmZpbGVzIHByb3BlcnR5IG9mIHRoZSBpbnB1dCwgd2hpY2ggaXMgYSBGaWxlTGlzdC5cbiAgICAgICAgaWYgKCgwLCBkb21fMS5pc0ZpbGVGaWVsZCkoJGRvbU5vZGUpKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgaW5wdXQgZmlsZSBmaWVsZHMgaWYgdGhlIGZvcm0gaXMgbm90IGVuY29kZWQgcHJvcGVybHkuXG4gICAgICAgICAgICBpZiAoKDAsIGRvbV8xLmlzVXBsb2FkRm9ybSkodGhpcy4kZm9ybSkpIHtcbiAgICAgICAgICAgICAgICAvLyBIVE1MNSBjb21wYXRpYmxlIGJyb3dzZXIuXG4gICAgICAgICAgICAgICAgaWYgKCgwLCBkb21fMS5pc0ZpbGVMaXN0KSgkZG9tTm9kZSkgJiYgKChfYSA9ICRkb21Ob2RlID09PSBudWxsIHx8ICRkb21Ob2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAkZG9tTm9kZS5maWxlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRkb21Ob2RlLmZpbGVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgkZG9tTm9kZS52YWx1ZSAmJiAkZG9tTm9kZS52YWx1ZSAhPT0gJycgP1xuICAgICAgICAgICAgICAgICAgICAgICAgJGRvbU5vZGUudmFsdWUgOlxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBXZSdyZSBvbmx5IGludGVyZXN0ZWQgaW4gdGV4dGFyZWEgZmllbGRzIHRoYXQgaGF2ZSB2YWx1ZXMuXG4gICAgICAgIGlmICgoMCwgZG9tXzEuaXNUZXh0YXJlYSkoJGRvbU5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKCRkb21Ob2RlLnZhbHVlICYmICRkb21Ob2RlLnZhbHVlICE9PSAnJyA/XG4gICAgICAgICAgICAgICAgJGRvbU5vZGUudmFsdWUgOlxuICAgICAgICAgICAgICAgIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGRvbV8xLmlzU2VsZWN0U2ltcGxlKSgkZG9tTm9kZSkpIHtcbiAgICAgICAgICAgIGlmICgkZG9tTm9kZS52YWx1ZSAmJiAkZG9tTm9kZS52YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGRvbU5vZGUudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgkZG9tTm9kZS5vcHRpb25zICYmXG4gICAgICAgICAgICAgICAgJGRvbU5vZGUub3B0aW9ucy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAkZG9tTm9kZS5vcHRpb25zWzBdLnZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAkZG9tTm9kZS5vcHRpb25zWzBdLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFdlJ3JlIG9ubHkgaW50ZXJlc3RlZCBpbiBtdWx0aXBsZSBzZWxlY3RzIHRoYXQgaGF2ZSBhdCBsZWFzdCBvbmUgb3B0aW9uIHNlbGVjdGVkLlxuICAgICAgICBpZiAoKDAsIGRvbV8xLmlzU2VsZWN0TXVsdGlwbGUpKCRkb21Ob2RlKSkge1xuICAgICAgICAgICAgaWYgKCRkb21Ob2RlLm9wdGlvbnMgJiYgJGRvbU5vZGUub3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEuZm9yRWFjaCkoJGRvbU5vZGUub3B0aW9ucywgZnVuY3Rpb24gKCRvcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKCRvcHRpb24udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuaW5jbHVkZUVtcHR5VmFsdWVkRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWVzLmxlbmd0aCA/IHZhbHVlcyA6IGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UncmUgb25seSBpbnRlcmVzdGVkIGlmIHRoZSBidXR0b24gaXMgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgIGlmICgoMCwgZG9tXzEuaXNTdWJtaXRCdXR0b24pKCRkb21Ob2RlKSkge1xuICAgICAgICAgICAgaWYgKCRkb21Ob2RlLnZhbHVlICYmICRkb21Ob2RlLnZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAkZG9tTm9kZS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkZG9tTm9kZS5pbm5lclRleHQgJiYgJGRvbU5vZGUuaW5uZXJUZXh0ICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAkZG9tTm9kZS5pbm5lclRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmFsbGJhY2sgb3Igb3RoZXIgbm9uLXNwZWNpYWwgZmllbGRzLlxuICAgICAgICBpZiAodHlwZW9mICRkb21Ob2RlLnZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuaW5jbHVkZUVtcHR5VmFsdWVkRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGRvbU5vZGUudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCRkb21Ob2RlLnZhbHVlICE9PSAnJyA/ICRkb21Ob2RlLnZhbHVlIDogZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByb2Nlc3NTaW5nbGVMZXZlbE5vZGUoJGRvbU5vZGUsIGFyciwgZG9tTm9kZVZhbHVlLCByZXN1bHQpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBsYXN0IHJlbWFpbmluZyBrZXkuXG4gICAgICAgIGNvbnN0IGtleSA9IGFyclswXTtcbiAgICAgICAgLy8gV2UncmUgb25seSBpbnRlcmVzdGVkIGluIHRoZSByYWRpbyB0aGF0IGlzIGNoZWNrZWQuXG4gICAgICAgIGlmICgoMCwgZG9tXzEuaXNSYWRpbykoJGRvbU5vZGUpKSB7XG4gICAgICAgICAgICBpZiAoZG9tTm9kZVZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gZG9tTm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBkb21Ob2RlVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2tib3hlcyBhcmUgYSBzcGVjaWFsIGNhc2UuXG4gICAgICAgIC8vIFdlIGhhdmUgdG8gZ3JhYiBlYWNoIGNoZWNrZWQgdmFsdWVzXG4gICAgICAgIC8vIGFuZCBwdXQgdGhlbSBpbnRvIGFuIGFycmF5LlxuICAgICAgICBpZiAoKDAsIGRvbV8xLmlzQ2hlY2tib3gpKCRkb21Ob2RlKSkge1xuICAgICAgICAgICAgaWYgKGRvbU5vZGVWYWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mb3JtRWxlbWVudEhhc1NpYmxpbmdzKCRkb21Ob2RlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdFtrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRba2V5XS5wdXNoKGRvbU5vZGVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IGRvbU5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTXVsdGlwbGUgc2VsZWN0IGlzIGEgc3BlY2lhbCBjYXNlLlxuICAgICAgICAvLyBXZSBoYXZlIHRvIGdyYWIgZWFjaCBzZWxlY3RlZCBvcHRpb24gYW5kIHB1dCB0aGVtIGludG8gYW4gYXJyYXkuXG4gICAgICAgIGlmICgoMCwgZG9tXzEuaXNTZWxlY3RNdWx0aXBsZSkoJGRvbU5vZGUpKSB7XG4gICAgICAgICAgICBpZiAoZG9tTm9kZVZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gZG9tTm9kZVZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEZhbGxiYWNrIG9yIG90aGVyIGNhc2VzIHRoYXQgZG9uJ3RcbiAgICAgICAgLy8gbmVlZCBzcGVjaWFsIHRyZWF0bWVudCBvZiB0aGUgdmFsdWUuXG4gICAgICAgIHJlc3VsdFtrZXldID0gZG9tTm9kZVZhbHVlO1xuICAgICAgICByZXR1cm4gZG9tTm9kZVZhbHVlO1xuICAgIH1cbiAgICBwcm9jZXNzTXVsdGlMZXZlbE5vZGUoJGRvbU5vZGUsIGFyciwgdmFsdWUsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBrZXlOYW1lID0gYXJyWzBdO1xuICAgICAgICBpZiAoYXJyLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGlmIChrZXlOYW1lID09PSAnW10nKSB7XG4gICAgICAgICAgICAgICAgLy9yZXN1bHQucHVzaCh7fSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0WygwLCB1dGlsc18xLmdldE5leHRJbnRlZ2VyS2V5KShyZXN1bHQpXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc011bHRpTGV2ZWxOb2RlKCRkb21Ob2RlLCBhcnIuc3BsaWNlKDEsIGFyci5sZW5ndGgpLCB2YWx1ZSwgcmVzdWx0WygwLCB1dGlsc18xLmdldExhc3RJbnRlZ2VyS2V5KShyZXN1bHQpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0W2tleU5hbWVdICYmICgwLCB1dGlsc18xLmdldE9iakxlbmd0aCkocmVzdWx0W2tleU5hbWVdKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy9yZXN1bHRba2V5TmFtZV0ucHVzaChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc011bHRpTGV2ZWxOb2RlKCRkb21Ob2RlLCBhcnIuc3BsaWNlKDEsIGFyci5sZW5ndGgpLCB2YWx1ZSwgcmVzdWx0W2tleU5hbWVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXlOYW1lXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NNdWx0aUxldmVsTm9kZSgkZG9tTm9kZSwgYXJyLnNwbGljZSgxLCBhcnIubGVuZ3RoKSwgdmFsdWUsIHJlc3VsdFtrZXlOYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTGFzdCBrZXksIGF0dGFjaCB0aGUgb3JpZ2luYWwgdmFsdWUuXG4gICAgICAgIGlmIChhcnIubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBpZiAoa2V5TmFtZSA9PT0gJ1tdJykge1xuICAgICAgICAgICAgICAgIC8vcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIHJlc3VsdFsoMCwgdXRpbHNfMS5nZXROZXh0SW50ZWdlcktleSkocmVzdWx0KV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzU2luZ2xlTGV2ZWxOb2RlKCRkb21Ob2RlLCBhcnIsIHZhbHVlLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIC8vICByZXN1bHRba2V5TmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvcm1FbGVtZW50SGFzU2libGluZ3MoJGRvbU5vZGUpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9ICRkb21Ob2RlLm5hbWU7XG4gICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwodGhpcy4kZm9ybUVsZW1lbnRzLCAoaW5wdXQpID0+IHsgcmV0dXJuIGlucHV0Lm5hbWUgPT09IG5hbWU7IH0pLmxlbmd0aCA+IDE7XG4gICAgfVxufVxuZXhwb3J0cy5Gb3JtVG9PYmplY3QgPSBGb3JtVG9PYmplY3Q7XG4vLyBDdXJyZW50bHkgbWF0Y2hpbmcgb25seSBmaWVsZHMgbGlrZSAnZmllbGROYW1lWy4uLl0gb3IgZmllbGROYW1lW10nLlxuRm9ybVRvT2JqZWN0LmtleVJlZ2V4ID0gL1teW1xcXV0rfFxcW10vZztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0ZpbGVMaXN0ID0gZXhwb3J0cy5pc0NoZWNrZWQgPSBleHBvcnRzLmlzU3VibWl0QnV0dG9uID0gZXhwb3J0cy5pc1NlbGVjdE11bHRpcGxlID0gZXhwb3J0cy5pc1NlbGVjdFNpbXBsZSA9IGV4cG9ydHMuaXNUZXh0YXJlYSA9IGV4cG9ydHMuaXNGaWxlRmllbGQgPSBleHBvcnRzLmlzQ2hlY2tib3ggPSBleHBvcnRzLmlzUmFkaW8gPSBleHBvcnRzLmlzVXBsb2FkRm9ybSA9IGV4cG9ydHMuaXNEb21FbGVtZW50Tm9kZSA9IHZvaWQgMDtcbi8qKlxuICogQ2hlY2sgdG8gc2VlIGlmIHRoZSBvYmplY3QgaXMgYW4gSFRNTCBub2RlLlxuICpcbiAqIEBwYXJhbSB7SFRNTEZvcm1FbGVtZW50IHwgSFRNTEVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0RvbUVsZW1lbnROb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gKEJvb2xlYW4obm9kZSkgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnICYmICdub2RlVHlwZScgaW4gbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKTtcbn1cbmV4cG9ydHMuaXNEb21FbGVtZW50Tm9kZSA9IGlzRG9tRWxlbWVudE5vZGU7XG5mdW5jdGlvbiBpc1VwbG9hZEZvcm0oJGZvcm0pIHtcbiAgICByZXR1cm4gQm9vbGVhbigkZm9ybS5lbmN0eXBlICYmICRmb3JtLmVuY3R5cGUgPT09ICdtdWx0aXBhcnQvZm9ybS1kYXRhJyk7XG59XG5leHBvcnRzLmlzVXBsb2FkRm9ybSA9IGlzVXBsb2FkRm9ybTtcbmZ1bmN0aW9uIGlzUmFkaW8oJGRvbU5vZGUpIHtcbiAgICByZXR1cm4gJGRvbU5vZGUubm9kZU5hbWUgPT09ICdJTlBVVCcgJiYgJGRvbU5vZGUudHlwZSA9PT0gJ3JhZGlvJztcbn1cbmV4cG9ydHMuaXNSYWRpbyA9IGlzUmFkaW87XG5mdW5jdGlvbiBpc0NoZWNrYm94KCRkb21Ob2RlKSB7XG4gICAgcmV0dXJuICRkb21Ob2RlLm5vZGVOYW1lID09PSAnSU5QVVQnICYmICRkb21Ob2RlLnR5cGUgPT09ICdjaGVja2JveCc7XG59XG5leHBvcnRzLmlzQ2hlY2tib3ggPSBpc0NoZWNrYm94O1xuZnVuY3Rpb24gaXNGaWxlRmllbGQoJGRvbU5vZGUpIHtcbiAgICByZXR1cm4gJGRvbU5vZGUubm9kZU5hbWUgPT09ICdJTlBVVCcgJiYgJGRvbU5vZGUudHlwZSA9PT0gJ2ZpbGUnO1xufVxuZXhwb3J0cy5pc0ZpbGVGaWVsZCA9IGlzRmlsZUZpZWxkO1xuZnVuY3Rpb24gaXNUZXh0YXJlYSgkZG9tTm9kZSkge1xuICAgIHJldHVybiAkZG9tTm9kZS5ub2RlTmFtZSA9PT0gJ1RFWFRBUkVBJztcbn1cbmV4cG9ydHMuaXNUZXh0YXJlYSA9IGlzVGV4dGFyZWE7XG5mdW5jdGlvbiBpc1NlbGVjdFNpbXBsZSgkZG9tTm9kZSkge1xuICAgIHJldHVybiAkZG9tTm9kZS5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcgJiYgJGRvbU5vZGUudHlwZSA9PT0gJ3NlbGVjdC1vbmUnO1xufVxuZXhwb3J0cy5pc1NlbGVjdFNpbXBsZSA9IGlzU2VsZWN0U2ltcGxlO1xuZnVuY3Rpb24gaXNTZWxlY3RNdWx0aXBsZSgkZG9tTm9kZSkge1xuICAgIHJldHVybiAkZG9tTm9kZS5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcgJiYgJGRvbU5vZGUudHlwZSA9PT0gJ3NlbGVjdC1tdWx0aXBsZSc7XG59XG5leHBvcnRzLmlzU2VsZWN0TXVsdGlwbGUgPSBpc1NlbGVjdE11bHRpcGxlO1xuZnVuY3Rpb24gaXNTdWJtaXRCdXR0b24oJGRvbU5vZGUpIHtcbiAgICByZXR1cm4gJGRvbU5vZGUubm9kZU5hbWUgPT09ICdCVVRUT04nICYmICRkb21Ob2RlLnR5cGUgPT09ICdzdWJtaXQnO1xufVxuZXhwb3J0cy5pc1N1Ym1pdEJ1dHRvbiA9IGlzU3VibWl0QnV0dG9uO1xuZnVuY3Rpb24gaXNDaGVja2VkKCRkb21Ob2RlKSB7XG4gICAgcmV0dXJuICRkb21Ob2RlLmNoZWNrZWQ7XG59XG5leHBvcnRzLmlzQ2hlY2tlZCA9IGlzQ2hlY2tlZDtcbi8vZnVuY3Rpb24gaXNNdWx0aXBsZSgkZG9tTm9kZSl7XG4vLyAgcmV0dXJuICgkZG9tTm9kZS5tdWx0aXBsZSA/IHRydWUgOiBmYWxzZSk7XG4vL31cbmZ1bmN0aW9uIGlzRmlsZUxpc3QoJGRvbU5vZGUpIHtcbiAgICByZXR1cm4gKHdpbmRvdy5GaWxlTGlzdCAmJiAoJGRvbU5vZGUuZmlsZXMgaW5zdGFuY2VvZiB3aW5kb3cuRmlsZUxpc3QpKTtcbn1cbmV4cG9ydHMuaXNGaWxlTGlzdCA9IGlzRmlsZUxpc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZm9yRWFjaCA9IGV4cG9ydHMuZXh0ZW5kID0gZXhwb3J0cy5nZXRPYmpMZW5ndGggPSBleHBvcnRzLmdldE5leHRJbnRlZ2VyS2V5ID0gZXhwb3J0cy5nZXRMYXN0SW50ZWdlcktleSA9IGV4cG9ydHMuY2hlY2tGb3JMYXN0TnVtZXJpY0tleSA9IHZvaWQgMDtcbi8qKlxuICogQ2hlY2sgZm9yIGxhc3QgbnVtZXJpYyBrZXkuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrRm9yTGFzdE51bWVyaWNLZXkobykge1xuICAgIGlmICghbyB8fCB0eXBlb2YgbyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMobykuZmlsdGVyKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VJbnQoZWxlbSwgMTApKTtcbiAgICB9KS5zcGxpY2UoLTEpWzBdO1xufVxuZXhwb3J0cy5jaGVja0Zvckxhc3ROdW1lcmljS2V5ID0gY2hlY2tGb3JMYXN0TnVtZXJpY0tleTtcbi8qKlxuICogR2V0IGxhc3QgbnVtZXJpYyBrZXkgZnJvbSBhbiBvYmplY3QuXG4gKiBAcGFyYW0gbyBvYmplY3RcbiAqIEByZXR1cm4gaW50XG4gKi9cbmZ1bmN0aW9uIGdldExhc3RJbnRlZ2VyS2V5KG8pIHtcbiAgICBjb25zdCBsYXN0S2V5SW5kZXggPSBjaGVja0Zvckxhc3ROdW1lcmljS2V5KG8pO1xuICAgIGlmICh0eXBlb2YgbGFzdEtleUluZGV4ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQobGFzdEtleUluZGV4LCAxMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59XG5leHBvcnRzLmdldExhc3RJbnRlZ2VyS2V5ID0gZ2V0TGFzdEludGVnZXJLZXk7XG4vKipcbiAqIEdldCB0aGUgbmV4dCBudW1lcmljIGtleSAobGlrZSB0aGUgaW5kZXggZnJvbSBhIFBIUCBhcnJheSlcbiAqIEBwYXJhbSBvIG9iamVjdFxuICogQHJldHVybiBpbnRcbiAqL1xuZnVuY3Rpb24gZ2V0TmV4dEludGVnZXJLZXkobykge1xuICAgIGNvbnN0IGxhc3RLZXlJbmRleCA9IGNoZWNrRm9yTGFzdE51bWVyaWNLZXkobyk7XG4gICAgaWYgKHR5cGVvZiBsYXN0S2V5SW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChsYXN0S2V5SW5kZXgsIDEwKSArIDE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59XG5leHBvcnRzLmdldE5leHRJbnRlZ2VyS2V5ID0gZ2V0TmV4dEludGVnZXJLZXk7XG4vKipcbiAqIEdldCB0aGUgcmVhbCBudW1iZXIgb2YgcHJvcGVydGllcyBmcm9tIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb1xuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0T2JqTGVuZ3RoKG8pIHtcbiAgICBpZiAodHlwZW9mIG8gIT09ICdvYmplY3QnIHx8IG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGxldCBsID0gMDtcbiAgICBsZXQgaztcbiAgICBpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGwgPSBPYmplY3Qua2V5cyhvKS5sZW5ndGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKGsgaW4gbykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBrKSkge1xuICAgICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbDtcbn1cbmV4cG9ydHMuZ2V0T2JqTGVuZ3RoID0gZ2V0T2JqTGVuZ3RoO1xuLyoqXG4gKiBTaW1wbGUgZXh0ZW5kIG9mIG93biBwcm9wZXJ0aWVzLlxuICogTmVlZGVkIGZvciBvdXIgc2V0dGluZ3MuXG4gKlxuICogQHBhcmFtIHtJRm9ybVRvT2JqZWN0T3B0aW9uc30gc2V0dGluZ3NcbiAqIEBwYXJhbSAge0lGb3JtVG9PYmplY3RPcHRpb25zfSBzb3VyY2UgVGhlIG9iamVjdCB3aXRoIG5ldyBwcm9wZXJ0aWVzIHRoYXQgd2Ugd2FudCB0byBhZGQgdGhlIGRlc3RpbmF0aW9uLlxuICogQHJldHVybiB7SUZvcm1Ub09iamVjdE9wdGlvbnN9XG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChzZXR0aW5ncywgc291cmNlKSB7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpIGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwgaSkpIHtcbiAgICAgICAgICAgIHNldHRpbmdzW2ldID0gc291cmNlW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZXR0aW5ncztcbn1cbmV4cG9ydHMuZXh0ZW5kID0gZXh0ZW5kO1xuLy8gSXRlcmF0aW9uIHRocm91Z2ggY29sbGVjdGlvbnMuIENvbXBhdGlibGUgd2l0aCBJRS5cbmZ1bmN0aW9uIGZvckVhY2goYXJyLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGFyciwgY2FsbGJhY2spO1xufVxuZXhwb3J0cy5mb3JFYWNoID0gZm9yRWFjaDtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IEZvcm1Ub09iamVjdF8xID0gcmVxdWlyZShcIi4vRm9ybVRvT2JqZWN0XCIpO1xuZnVuY3Rpb24gZm9ybVRvT2JqZWN0KHNlbGVjdG9yLCBvcHRpb25zKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgRm9ybVRvT2JqZWN0XzEuRm9ybVRvT2JqZWN0KHNlbGVjdG9yLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmNvbnZlcnRUb09iaigpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnZm9ybVRvT2JqZWN0IEVSUk9SOicsIGUubWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBmb3JtVG9PYmplY3Q7XG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJGb3JtVG9PYmplY3QiLCJkb21fMSIsInV0aWxzXzEiLCJjb25zdHJ1Y3RvciIsInNlbGVjdG9yIiwib3B0aW9ucyIsImZvcm1TZWxlY3RvciIsIiRmb3JtIiwiJGZvcm1FbGVtZW50cyIsInNldHRpbmdzIiwiaW5jbHVkZUVtcHR5VmFsdWVkRWxlbWVudHMiLCJ3M2NTdWNjZXNzZnVsQ29udHJvbHNPbmx5IiwiZGVidWciLCJFcnJvciIsImdldE9iakxlbmd0aCIsImV4dGVuZCIsImluaXRGb3JtIiwiaW5pdEZvcm1FbGVtZW50cyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpc0RvbUVsZW1lbnROb2RlIiwiX2EiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiY29udmVydFRvT2JqIiwib2JqS2V5TmFtZXMiLCIkZG9tTm9kZSIsImRvbU5vZGVWYWx1ZSIsImkiLCJyZXN1bHQiLCJjcmVhdGUiLCJuYW1lIiwiZGlzYWJsZWQiLCJpc1JhZGlvIiwiaXNDaGVja2VkIiwiZ2V0Tm9kZVZhbHVlcyIsIm1hdGNoIiwia2V5UmVnZXgiLCJwcm9jZXNzU2luZ2xlTGV2ZWxOb2RlIiwicHJvY2Vzc011bHRpTGV2ZWxOb2RlIiwiaXNDaGVja2JveCIsImlzRmlsZUZpZWxkIiwiaXNVcGxvYWRGb3JtIiwiaXNGaWxlTGlzdCIsImZpbGVzIiwiaXNUZXh0YXJlYSIsImlzU2VsZWN0U2ltcGxlIiwiaXNTZWxlY3RNdWx0aXBsZSIsInZhbHVlcyIsImZvckVhY2giLCIkb3B0aW9uIiwic2VsZWN0ZWQiLCJwdXNoIiwiaXNTdWJtaXRCdXR0b24iLCJpbm5lclRleHQiLCJhcnIiLCJrZXkiLCJmb3JtRWxlbWVudEhhc1NpYmxpbmdzIiwia2V5TmFtZSIsImdldE5leHRJbnRlZ2VyS2V5Iiwic3BsaWNlIiwiZ2V0TGFzdEludGVnZXJLZXkiLCJBcnJheSIsInByb3RvdHlwZSIsImZpbHRlciIsImNhbGwiLCJpbnB1dCIsIm5vZGUiLCJCb29sZWFuIiwibm9kZVR5cGUiLCJlbmN0eXBlIiwibm9kZU5hbWUiLCJ0eXBlIiwiY2hlY2tlZCIsIndpbmRvdyIsIkZpbGVMaXN0IiwiY2hlY2tGb3JMYXN0TnVtZXJpY0tleSIsIm8iLCJrZXlzIiwiZWxlbSIsImlzTmFOIiwicGFyc2VJbnQiLCJsYXN0S2V5SW5kZXgiLCJrIiwibCIsImhhc093blByb3BlcnR5Iiwic291cmNlIiwiY2FsbGJhY2siLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiRm9ybVRvT2JqZWN0XzEiLCJlIiwiY29uc29sZSIsImxvZyIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9